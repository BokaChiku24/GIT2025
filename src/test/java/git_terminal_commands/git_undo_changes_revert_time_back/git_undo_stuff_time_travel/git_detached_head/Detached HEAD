You are in 'detached HEAD' state. You can look around, make experimental changes
and commit them, and you can discard any commits you make in this state without
impacting any branches by switching back to a branch.

Usually, HEAD points to a specific branch reference rather than a particular
commit.

HOW IT WORKS:
> HEAD is a pointer to the current branch reference

> The branch reference is a pointer to the last commit made on a particular branch.

> When we make a new commit, the branch reference is updated to reflect the new commit.

> The HEAD remains the same, because it's pointing at the branch reference.

> When you switch branches, HEAD is updated to the point to the specific branch
  reference.

> If we switch to the other branch, HEAD is now pointing to the other branch reference.

> This is all to say that HEAD usually refers to a branch NOT a specific commit.

> When we checkout a particular commit, HEAD points at that commit rather than at the
  branch pointer

USE OF DETACHED HEAD:

> Stay in detached HEAD to examine the contents of the old commit. Poke around,
  view the files etc.

> Leave and go back to wherever you were before reattached the HEAD.

> Create a new branch and switch to it. You can now make and save changes, since
  HEAD is no longer detached.